{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/seum/Desktop/peterpet/node_modules/react-native-neat-date-picker/src/components/Key.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\n\nvar Key = function Key(_ref) {\n  var Day = _ref.Day,\n      mode = _ref.mode,\n      output = _ref.output,\n      setOutput = _ref.setOutput,\n      colorOptions = _ref.colorOptions;\n  var dateTextColor = colorOptions.dateTextColor,\n      backgroundColor = colorOptions.backgroundColor,\n      selectedDateTextColor = colorOptions.selectedDateTextColor,\n      selectedDateBackgroundColor = colorOptions.selectedDateBackgroundColor;\n  var singleMode = mode === 'single';\n  var rangeMode = mode === 'range';\n\n  var onKeyPress = function onKeyPress() {\n    var _output$startDate;\n\n    if (Day.disabled) return;\n    var newDate = new Date(Day.year, Day.month, Day.date);\n    var shouldSetStartDate = !output.startDate || output.endDate || newDate.getTime() < ((_output$startDate = output.startDate) == null ? void 0 : _output$startDate.getTime());\n\n    if (singleMode) {\n      var newOutPut = _objectSpread(_objectSpread({}, output), {}, {\n        date: newDate\n      });\n\n      setOutput(newOutPut);\n      return;\n    }\n\n    if (rangeMode) {\n      if (shouldSetStartDate) {\n        var _newOutPut = _objectSpread(_objectSpread({}, output), {}, {\n          startDate: newDate,\n          endDate: null\n        });\n\n        setOutput(_newOutPut);\n      } else {\n        var _newOutPut2 = _objectSpread(_objectSpread({}, output), {}, {\n          endDate: newDate\n        });\n\n        setOutput(_newOutPut2);\n      }\n    }\n  };\n\n  var getColor = function getColor() {\n    var selectedColors = {\n      bgc: selectedDateBackgroundColor,\n      text: selectedDateTextColor\n    };\n    var notSelectedColors = {\n      bgc: backgroundColor,\n      text: dateTextColor\n    };\n    var disabledColors = {\n      bgc: backgroundColor,\n      text: dateTextColor + \"55\"\n    };\n\n    if (Day.isCurrentMonth === false) {\n      selectedColors.bgc = selectedDateBackgroundColor + \"22\";\n      notSelectedColors.text = dateTextColor + \"22\";\n      disabledColors.text = dateTextColor + \"22\";\n    }\n\n    var timeOfThisKey = new Date(Day.year, Day.month, Day.date).getTime();\n    if (Day.disabled) return disabledColors;\n\n    if (singleMode) {\n      var isThisDateSelected = timeOfThisKey === output.date.getTime();\n      return isThisDateSelected ? selectedColors : notSelectedColors;\n    }\n\n    if (rangeMode) {\n      var _output$startDate3;\n\n      if (!output.endDate) {\n        var _output$startDate2;\n\n        return timeOfThisKey === ((_output$startDate2 = output.startDate) == null ? void 0 : _output$startDate2.getTime()) ? selectedColors : notSelectedColors;\n      }\n\n      var isThisDayInSelectedRange = timeOfThisKey >= ((_output$startDate3 = output.startDate) == null ? void 0 : _output$startDate3.getTime()) && timeOfThisKey <= output.endDate.getTime();\n      return isThisDayInSelectedRange ? selectedColors : notSelectedColors;\n    }\n  };\n\n  var _getColor = getColor(),\n      bgc = _getColor.bgc,\n      textColor = _getColor.text;\n\n  return React.createElement(TouchableOpacity, {\n    onPress: onKeyPress,\n    style: [styles.keys, {\n      backgroundColor: bgc\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: [styles.keys_text, {\n      color: textColor\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, Day.date));\n};\n\nvar styles = StyleSheet.create({\n  keys: {\n    width: 34,\n    height: 34,\n    borderRadius: 10,\n    marginTop: 4,\n    marginHorizontal: 4,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  keys_text: {\n    fontSize: 16,\n    fontFamily: 'Roboto_500Medium'\n  }\n});\nexport default Key;","map":{"version":3,"sources":["/Users/seum/Desktop/peterpet/node_modules/react-native-neat-date-picker/src/components/Key.jsx"],"names":["React","Key","Day","mode","output","setOutput","colorOptions","dateTextColor","backgroundColor","selectedDateTextColor","selectedDateBackgroundColor","singleMode","rangeMode","onKeyPress","disabled","newDate","Date","year","month","date","shouldSetStartDate","startDate","endDate","getTime","newOutPut","getColor","selectedColors","bgc","text","notSelectedColors","disabledColors","isCurrentMonth","timeOfThisKey","isThisDateSelected","isThisDayInSelectedRange","textColor","styles","keys","keys_text","color","StyleSheet","create","width","height","borderRadius","marginTop","marginHorizontal","justifyContent","alignItems","fontSize","fontFamily"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { StyleSheet, TouchableOpacity, Text, } from 'react-native'\r\n\r\nconst Key = ({ Day, mode, output, setOutput, colorOptions }) => {\r\n\r\n    const { dateTextColor, backgroundColor, selectedDateTextColor, selectedDateBackgroundColor } = colorOptions\r\n    const singleMode = mode === 'single'\r\n    const rangeMode = mode === 'range'\r\n\r\n    const onKeyPress = () => {\r\n        if (Day.disabled) return\r\n\r\n\r\n        const newDate = new Date(Day.year, Day.month, Day.date)\r\n\r\n        const shouldSetStartDate = !output.startDate\r\n            || output.endDate\r\n            || (newDate.getTime() < output.startDate?.getTime())\r\n\r\n\r\n        if (singleMode) {\r\n            const newOutPut = { ...output, date: newDate }\r\n            setOutput(newOutPut)\r\n            return\r\n        }\r\n\r\n        if (rangeMode) {\r\n            if (shouldSetStartDate) {\r\n                const newOutPut = { ...output, startDate: newDate, endDate: null, }\r\n                setOutput(newOutPut)\r\n            } else {\r\n                const newOutPut = { ...output, endDate: newDate }\r\n                setOutput(newOutPut)\r\n            }\r\n        }\r\n    }\r\n\r\n    const getColor = () => {\r\n\r\n        const selectedColors = { bgc: selectedDateBackgroundColor, text: selectedDateTextColor, }\r\n        const notSelectedColors = { bgc: backgroundColor, text: dateTextColor, }\r\n        const disabledColors = { bgc: backgroundColor, text: `${dateTextColor}55`, }\r\n\r\n        if (Day.isCurrentMonth === false) {\r\n            selectedColors.bgc = `${selectedDateBackgroundColor}22`\r\n            notSelectedColors.text = `${dateTextColor}22`\r\n            disabledColors.text = `${dateTextColor}22`\r\n        }\r\n\r\n        const timeOfThisKey = new Date(Day.year, Day.month, Day.date).getTime()\r\n\r\n        if (Day.disabled) return disabledColors\r\n        if (singleMode) {\r\n            const isThisDateSelected = timeOfThisKey === output.date.getTime()\r\n            return isThisDateSelected ? selectedColors : notSelectedColors\r\n        }\r\n        if (rangeMode) {\r\n            if (!output.endDate) {\r\n                return timeOfThisKey === output.startDate?.getTime()\r\n                    ? selectedColors\r\n                    : notSelectedColors\r\n            }\r\n            const isThisDayInSelectedRange = timeOfThisKey >= output.startDate?.getTime() && timeOfThisKey <= output.endDate.getTime()\r\n            return isThisDayInSelectedRange ? selectedColors : notSelectedColors\r\n        }\r\n    }\r\n\r\n    const { bgc, text: textColor } = getColor()\r\n\r\n    return (\r\n        <TouchableOpacity onPress={onKeyPress}\r\n            style={[styles.keys, { backgroundColor: bgc }]}>\r\n            <Text style={[styles.keys_text, { color: textColor, }]}>{Day.date}</Text>\r\n        </TouchableOpacity>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    keys: {\r\n        // borderWidth: 1,\r\n        width: 34,\r\n        height: 34,\r\n        borderRadius: 10,\r\n        marginTop: 4,\r\n        marginHorizontal: 4,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    keys_text: {\r\n        fontSize: 16,\r\n        fontFamily: 'Roboto_500Medium'\r\n    },\r\n})\r\n\r\n\r\nexport default Key"]},"metadata":{},"sourceType":"module"}