{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/seum/Desktop/peterpet/src/screen/CommunityScreen.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as ImagePicker from 'expo-image-picker';\n\nfunction CommunityScreen() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userEmail = _useState4[0],\n      setUserEmail = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== 'web')) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onclick = function onclick() {\n    var textbox = {\n      inText: userEmail\n    };\n    fetch(\"http://localhost:5000/text\", {\n      method: \"post\",\n      headers: {\n        Accept: 'application/json',\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(textbox)\n    });\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    onChangeText: function onChangeText(UserEmail) {\n      return setUserEmail(UserEmail);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: onclick,\n    title: \"\\uC804\\uC1A1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10\n  }\n});\nexport default CommunityScreen;","map":{"version":3,"sources":["/Users/seum/Desktop/peterpet/src/screen/CommunityScreen.tsx"],"names":["React","useState","useEffect","ImagePicker","CommunityScreen","image","setImage","userEmail","setUserEmail","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","console","log","cancelled","uri","onclick","textbox","inText","fetch","method","headers","Accept","body","JSON","stringify","styles","input","UserEmail","alignItems","justifyContent","width","height","StyleSheet","create","margin","borderWidth","padding"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {StyleSheet, View, Button, TextInput, Image, Platform} from \"react-native\";\nimport * as ImagePicker from 'expo-image-picker';\n\nfunction CommunityScreen() {\n\n  const [image, setImage] = useState(null);\n  const [userEmail, setUserEmail] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.cancelled) {\n      setImage(result.uri);\n    }\n  };\n\n  // const createFormData = (image, body) => {\n  //   const data = new FormData();\n  \n  //   data.append(\"image\", {\n  //     name: image.fileName,\n  //     type: image.type,\n  //     uri:\n  //       Platform.OS === \"android\" ? image.uri : image.uri.replace(\"file://\", \"\")\n  //   });\n  \n  //   Object.keys(body).forEach(key => {\n  //     data.append(key, body[key]);\n  //   });\n  \n  //   return data;\n  // };\n\n  // const handleUploadImage = () => {\n  //   fetch(\"http://localhost:3000/api/upload\", {\n  //     method: \"POST\",\n  //     body: createFormData(this.state.image, { userId: \"123\" })\n  //   })\n  //     .then(response => response.json())\n  //     .then(response => {\n  //       console.log(\"upload succes\", response);\n  //       alert(\"Upload success!\");\n  //       this.setState({ image: null });\n  //     })\n  //     .catch(error => {\n  //       console.log(\"upload error\", error);\n  //       alert(\"Upload failed!\");\n  //     });\n  // };\n\n  const onclick = () => {\n    const textbox = {\n      inText: userEmail,\n    };\n    fetch(\"http://localhost:5000/text\", { \n      method: \"post\", //통신방법\n      headers: {\n        Accept: 'application/json', \n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify(textbox), //textbox라는 객체를 보냄\n    });\n  };\n\n  return (\n    <View>\n      <TextInput style={styles.input} onChangeText={(UserEmail) => setUserEmail(UserEmail)}/>\n      <Button onPress={onclick} title='전송'/>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n        {image && \n        <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />\n        // <Button title=\"Upload\" onPress={handleUploadImage} />\n        }\n      </View>\n    </View>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n  },\n});\n\nexport default CommunityScreen;\n\n// import React from 'react';\n// import {StyleSheet, Text, View} from \"react-native\";\n\n// function CommunityScreen() {\n//     return (\n//         <View style={styles.container}>\n//           <Text style={styles.font}>Community</Text>\n//         </View>\n//       );\n//     }\n    \n//     const styles = StyleSheet.create({\n//       container: {\n//         flex: 1,\n//         backgroundColor: '#F5FCFF',\n//         alignItems: 'center',\n//         justifyContent: 'center',\n//       },\n//       font: {\n//         fontSize: 22,\n//         marginBottom: 10,\n//       },\n//     });\n\n// export default CommunityScreen;\n"]},"metadata":{},"sourceType":"module"}