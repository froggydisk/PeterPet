{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/seum/Desktop/peterpet/src/screen/login/LoginScreen.js\";\n\nimport React, { useState, createRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Loader from \"./Loader\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      userEmail = _useState2[0],\n      setUserEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userPassword = _useState4[0],\n      setUserPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errortext = _useState8[0],\n      setErrortext = _useState8[1];\n\n  var passwordInputRef = createRef();\n\n  var handleSubmitPress = function handleSubmitPress() {\n    setErrortext('');\n\n    if (!userEmail) {\n      Alert.alert('멍!', '아이디를 입력해주세요');\n      return;\n    }\n\n    if (!userPassword) {\n      Alert.alert('왈!', '비밀번호를 입력해주세요');\n      return;\n    }\n\n    setLoading(true);\n    var dataToSend = {\n      email: userEmail,\n      password: userPassword\n    };\n    var formBody = [];\n\n    for (var key in dataToSend) {\n      var encodedKey = encodeURIComponent(key);\n      var encodedValue = encodeURIComponent(dataToSend[key]);\n      formBody.push(encodedKey + '=' + encodedValue);\n    }\n\n    formBody = formBody.join('&');\n    fetch('http://localhost:3000/api/user/login', {\n      method: 'POST',\n      body: formBody,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      setLoading(false);\n      console.log(responseJson);\n\n      if (responseJson.status === 'success') {\n        AsyncStorage.setItem('user_id', responseJson.data.email);\n        console.log(responseJson.data.email);\n        navigation.replace('RealChat');\n      } else {\n        setErrortext(responseJson.msg);\n        console.log('Please check your email id or password');\n      }\n    }).catch(function (error) {\n      setLoading(false);\n      console.error(error);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.mainBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, React.createElement(Loader, {\n    loading: loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), React.createElement(ScrollView, {\n    keyboardShouldPersistTaps: \"handled\",\n    contentContainerStyle: {\n      flex: 1,\n      justifyContent: 'center',\n      alignContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    enabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../../assets/peter.png\"),\n    style: {\n      width: '60%',\n      height: 100,\n      resizeMode: 'cover',\n      margin: 30\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(UserEmail) {\n      return setUserEmail(UserEmail);\n    },\n    placeholder: \"\\uC774\\uBA54\\uC77C\",\n    placeholderTextColor: \"#8b9cb5\",\n    autoCapitalize: \"none\",\n    keyboardType: \"email-address\",\n    returnKeyType: \"next\",\n    onSubmitEditing: function onSubmitEditing() {\n      return passwordInputRef.current && passwordInputRef.current.focus();\n    },\n    underlineColorAndroid: \"#f000\",\n    blurOnSubmit: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(UserPassword) {\n      return setUserPassword(UserPassword);\n    },\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n    placeholderTextColor: \"#8b9cb5\",\n    keyboardType: \"default\",\n    ref: passwordInputRef,\n    onSubmitEditing: Keyboard.dismiss,\n    blurOnSubmit: false,\n    secureTextEntry: true,\n    underlineColorAndroid: \"#f000\",\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  })), errortext != '' ? React.createElement(Text, {\n    style: styles.errorTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, errortext) : null, React.createElement(TouchableOpacity, {\n    style: styles.buttonStyle,\n    activeOpacity: 0.5,\n    onPress: handleSubmitPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, \"\\uB85C\\uADF8\\uC778\")), React.createElement(Text, {\n    style: styles.registerTextStyle,\n    onPress: function onPress() {\n      return navigation.navigate('RegisterScreen');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"\\uD68C\\uC6D0\\uAC00\\uC785\")))));\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  mainBody: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    alignContent: 'center'\n  },\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  buttonStyle: {\n    backgroundColor: '#A5DF00',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 25\n  },\n  buttonTextStyle: {\n    color: '#283328',\n    paddingVertical: 12,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: '#283328',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8'\n  },\n  registerTextStyle: {\n    color: '#283328',\n    textAlign: 'center',\n    fontSize: 14,\n    alignSelf: 'center',\n    padding: 10\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  }\n});","map":{"version":3,"sources":["/Users/seum/Desktop/peterpet/src/screen/login/LoginScreen.js"],"names":["React","useState","createRef","AsyncStorage","Loader","LoginScreen","navigation","userEmail","setUserEmail","userPassword","setUserPassword","loading","setLoading","errortext","setErrortext","passwordInputRef","handleSubmitPress","Alert","alert","dataToSend","email","password","formBody","key","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","body","headers","then","response","json","responseJson","console","log","status","setItem","data","replace","msg","catch","error","styles","mainBody","flex","justifyContent","alignContent","alignItems","require","width","height","resizeMode","margin","SectionStyle","inputStyle","UserEmail","current","focus","UserPassword","Keyboard","dismiss","errorTextStyle","buttonStyle","buttonTextStyle","registerTextStyle","navigate","StyleSheet","create","backgroundColor","flexDirection","marginTop","marginLeft","marginRight","borderWidth","color","borderColor","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","alignSelf","padding"],"mappings":"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","sourcesContent":["import React, {useState, createRef} from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  View,\n  Text,\n  ScrollView,\n  Image,\n  Keyboard,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  Alert,\n} from 'react-native';\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport Loader from './Loader';\n\nconst LoginScreen = ({navigation}) => {\n  const [userEmail, setUserEmail] = useState('');\n  const [userPassword, setUserPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [errortext, setErrortext] = useState('');\n\n  const passwordInputRef = createRef();\n\n  const handleSubmitPress = () => {\n    setErrortext('');\n    if (!userEmail) {\n      Alert.alert('멍!','아이디를 입력해주세요');\n      return;\n    }\n    if (!userPassword) {\n      Alert.alert('왈!','비밀번호를 입력해주세요');\n      return;\n    }\n    setLoading(true);\n    let dataToSend = {email: userEmail, password: userPassword};\n    let formBody = [];\n    for (let key in dataToSend) {\n      let encodedKey = encodeURIComponent(key);\n      let encodedValue = encodeURIComponent(dataToSend[key]);\n      formBody.push(encodedKey + '=' + encodedValue);\n    }\n    formBody = formBody.join('&');\n\n    fetch('http://localhost:3000/api/user/login', {\n      method: 'POST',\n      body: formBody,\n      headers: {\n        //Header Defination\n        'Content-Type':\n        'application/x-www-form-urlencoded;charset=UTF-8',\n      },\n    })\n      .then((response) => response.json())\n      .then((responseJson) => {\n        //Hide Loader\n        setLoading(false);\n        console.log(responseJson);\n        // If server response message same as Data Matched\n        if (responseJson.status === 'success') {\n          AsyncStorage.setItem('user_id', responseJson.data.email);\n          console.log(responseJson.data.email);\n          navigation.replace('RealChat');\n        } else {\n          setErrortext(responseJson.msg);\n          console.log('Please check your email id or password');\n        }\n      })\n      .catch((error) => {\n        //Hide Loader\n        setLoading(false);\n        console.error(error);\n      });\n  };\n\n  return (\n    <View style={styles.mainBody}>\n      <Loader loading={loading} />\n      <ScrollView\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={{\n          flex: 1,\n          justifyContent: 'center',\n          alignContent: 'center',\n        }}>\n        <View>\n          <KeyboardAvoidingView enabled>\n            <View style={{alignItems: 'center'}}>\n              <Image\n                source={require('../../../assets/peter.png')}\n                style={{\n                  width: '60%',\n                  height: 100,\n                  resizeMode: 'cover',\n                  margin: 30,\n                }}\n              />\n            </View>\n            <View style={styles.SectionStyle}>\n              <TextInput\n                style={styles.inputStyle}\n                onChangeText={(UserEmail) =>\n                  setUserEmail(UserEmail)\n                }\n                placeholder=\"이메일\" //dummy@abc.com\n                placeholderTextColor=\"#8b9cb5\"\n                autoCapitalize=\"none\"\n                keyboardType=\"email-address\"\n                returnKeyType=\"next\"\n                onSubmitEditing={() =>\n                  passwordInputRef.current &&\n                  passwordInputRef.current.focus()\n                }\n                underlineColorAndroid=\"#f000\"\n                blurOnSubmit={false}\n              />\n            </View>\n            <View style={styles.SectionStyle}>\n              <TextInput\n                style={styles.inputStyle}\n                onChangeText={(UserPassword) =>\n                  setUserPassword(UserPassword)\n                }\n                placeholder=\"비밀번호\" //12345\n                placeholderTextColor=\"#8b9cb5\"\n                keyboardType=\"default\"\n                ref={passwordInputRef}\n                onSubmitEditing={Keyboard.dismiss}\n                blurOnSubmit={false}\n                secureTextEntry={true}\n                underlineColorAndroid=\"#f000\"\n                returnKeyType=\"next\"\n              />\n            </View>\n            {errortext != '' ? (\n              <Text style={styles.errorTextStyle}>\n                {errortext}\n              </Text>\n            ) : null}\n            <TouchableOpacity\n              style={styles.buttonStyle}\n              activeOpacity={0.5}\n              onPress={handleSubmitPress}>\n              <Text style={styles.buttonTextStyle}>로그인</Text>\n            </TouchableOpacity>\n            <Text\n              style={styles.registerTextStyle}\n              onPress={() => navigation.navigate('RegisterScreen')}>\n              회원가입\n            </Text>\n          </KeyboardAvoidingView>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\nexport default LoginScreen;\n\nconst styles = StyleSheet.create({\n  mainBody: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    alignContent: 'center',\n  },\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10,\n  },\n  buttonStyle: {\n    backgroundColor: '#A5DF00',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#7DE24E',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 25,\n  },\n  buttonTextStyle: {\n    color: '#283328',\n    paddingVertical: 12,\n    fontSize: 16,\n  },\n  inputStyle: {\n    flex: 1,\n    color: '#283328',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8',\n  },\n  registerTextStyle: {\n    color: '#283328',\n    textAlign: 'center',\n    // fontWeight: 'bold',\n    fontSize: 14,\n    alignSelf: 'center',\n    padding: 10,\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14,\n  },\n});"]},"metadata":{},"sourceType":"module"}