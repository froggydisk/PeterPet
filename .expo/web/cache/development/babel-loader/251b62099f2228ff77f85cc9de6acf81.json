{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/seum/Desktop/peterpet/node_modules/react-native-neat-date-picker/src/components/NeatDatePicker.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Modal from 'react-native-modal';\nimport PropTypes from 'prop-types';\nimport useDaysOfMonth from \"../hooks/useDaysOfMonth\";\nimport { MaterialIcons as MDicon } from '@expo/vector-icons';\nimport { getMonthInChinese, getMonthInEnglish } from \"../lib/lib\";\nimport ChangeYearModal from \"./ChangeYearModal\";\nimport { useFonts, Roboto_100Thin, Roboto_300Light, Roboto_400Regular, Roboto_500Medium, Roboto_700Bold } from '@expo-google-fonts/roboto';\nimport Key from \"./Key\";\nvar winY = Dimensions.get('window').height;\n\nvar NeatDatePicker = function NeatDatePicker(_ref) {\n  var isVisible = _ref.isVisible,\n      initialDate = _ref.initialDate,\n      mode = _ref.mode,\n      onCancel = _ref.onCancel,\n      onConfirm = _ref.onConfirm,\n      minDate = _ref.minDate,\n      maxDate = _ref.maxDate,\n      startDate = _ref.startDate,\n      endDate = _ref.endDate,\n      onBackButtonPress = _ref.onBackButtonPress,\n      onBackdropPress = _ref.onBackdropPress,\n      chinese = _ref.chinese,\n      colorOptions = _ref.colorOptions;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showChangeYearModal = _useState2[0],\n      setShowChangeYearModal = _useState2[1];\n\n  var sevenDays = chinese ? ['日', '一', '二', '三', '四', '五', '六'] : ['S', 'M', 'T', 'W', 'T', 'F', 'S'];\n\n  var _useState3 = useState(initialDate || new Date()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayTime = _useState4[0],\n      setDisplayTime = _useState4[1];\n\n  var year = displayTime.getFullYear();\n  var month = displayTime.getMonth();\n  var date = displayTime.getDate();\n  var TODAY = new Date(year, month, date);\n\n  var _useState5 = useState(mode === 'single' ? {\n    date: TODAY,\n    startDate: null,\n    endDate: null\n  } : {\n    date: null,\n    startDate: startDate || null,\n    endDate: endDate || null\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      output = _useState6[0],\n      setOutput = _useState6[1];\n\n  var _useState7 = useState(output),\n      _useState8 = _slicedToArray(_useState7, 2),\n      originalOutput = _useState8[0],\n      setOriginalOutput = _useState8[1];\n\n  var minTime = minDate == null ? void 0 : minDate.getTime();\n  var maxTime = maxDate == null ? void 0 : maxDate.getTime();\n  var daysArray = useDaysOfMonth(year, month, minTime, maxTime);\n\n  var onCancelPress = function onCancelPress() {\n    onCancel();\n    setTimeout(function () {\n      setOutput(originalOutput);\n      if (mode === 'range' & !originalOutput.startDate) return setDisplayTime(initialDate || new Date());\n      return mode === 'single' ? setDisplayTime(originalOutput.date) : setDisplayTime(originalOutput.startDate);\n    }, 300);\n  };\n\n  var autoCompleteEndDate = function autoCompleteEndDate() {\n    output.endDate = output.startDate;\n    setOutput(_objectSpread(_objectSpread({}, output), {}, {\n      endDate: null\n    }));\n  };\n\n  var onConfirmPress = function onConfirmPress() {\n    if (mode === 'single') onConfirm(output.date);else {\n      if (mode === 'range' & !output.startDate) return onCancel();\n      if (!output.endDate) autoCompleteEndDate();\n      onConfirm(output.startDate, output.endDate);\n    }\n    setOriginalOutput(_objectSpread({}, output));\n    setTimeout(function () {\n      return mode === 'single' ? setDisplayTime(output.date) : setDisplayTime(output.startDate);\n    }, 300);\n  };\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      btnDisabled = _useState10[0],\n      setBtnDisabled = _useState10[1];\n\n  var onPrev = function onPrev() {\n    setBtnDisabled(true);\n    setDisplayTime(new Date(year, month - 1, date));\n  };\n\n  var onNext = function onNext() {\n    setBtnDisabled(true);\n    setDisplayTime(new Date(year, month + 1, date));\n  };\n\n  useEffect(function () {\n    setTimeout(setBtnDisabled, 300, false);\n  }, [btnDisabled]);\n\n  var _defaultColorOptions$ = _objectSpread(_objectSpread({}, defaultColorOptions), colorOptions),\n      backgroundColor = _defaultColorOptions$.backgroundColor,\n      headerColor = _defaultColorOptions$.headerColor,\n      headerTextColor = _defaultColorOptions$.headerTextColor,\n      changeYearModalColor = _defaultColorOptions$.changeYearModalColor,\n      weekDaysColor = _defaultColorOptions$.weekDaysColor,\n      dateTextColor = _defaultColorOptions$.dateTextColor,\n      selectedDateTextColor = _defaultColorOptions$.selectedDateTextColor,\n      selectedDateBackgroundColor = _defaultColorOptions$.selectedDateBackgroundColor,\n      confirmButtonColor = _defaultColorOptions$.confirmButtonColor;\n\n  var _useFonts = useFonts({\n    Roboto_100Thin: Roboto_100Thin,\n    Roboto_300Light: Roboto_300Light,\n    Roboto_400Regular: Roboto_400Regular,\n    Roboto_500Medium: Roboto_500Medium,\n    Roboto_700Bold: Roboto_700Bold\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      isFontsLoaded = _useFonts2[0];\n\n  if (!isFontsLoaded) return null;\n  return React.createElement(Modal, {\n    isVisible: isVisible,\n    animationIn: 'zoomIn',\n    animationOut: 'zoomOut',\n    useNativeDriver: true,\n    hideModalContentWhileAnimating: true,\n    onBackButtonPress: onBackButtonPress || onCancelPress,\n    onBackdropPress: onBackdropPress || onCancelPress,\n    style: styles.modal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: [styles.container, {\n      backgroundColor: backgroundColor\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: [styles.header, {\n      backgroundColor: headerColor\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.changeMonthTO,\n    onPress: onPrev,\n    disabled: btnDisabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }, React.createElement(MDicon, {\n    name: 'keyboard-arrow-left',\n    size: 32,\n    color: headerTextColor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 25\n    }\n  })), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      setShowChangeYearModal(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: [styles.header__title, {\n      color: headerTextColor\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 25\n    }\n  }, daysArray[10].year + ' ', chinese ? getMonthInChinese(daysArray[10].month) : getMonthInEnglish(daysArray[10].month))), React.createElement(TouchableOpacity, {\n    style: styles.changeMonthTO,\n    onPress: onNext,\n    disabled: btnDisabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 21\n    }\n  }, React.createElement(MDicon, {\n    name: 'keyboard-arrow-right',\n    size: 32,\n    color: headerTextColor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 25\n    }\n  }))), React.createElement(View, {\n    style: styles.keys_container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }, sevenDays.map(function (weekDay, index) {\n    return React.createElement(View, {\n      style: styles.keys,\n      key: index.toString(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 25\n      }\n    }, React.createElement(Text, {\n      style: [styles.weekDays, {\n        color: weekDaysColor\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 29\n      }\n    }, weekDay));\n  }), daysArray.map(function (Day, i) {\n    return React.createElement(Key, {\n      key: Day.year.toString() + Day.month.toString() + i.toString(),\n      Day: Day,\n      mode: mode,\n      output: output,\n      setOutput: setOutput,\n      colorOptions: {\n        dateTextColor: dateTextColor,\n        backgroundColor: backgroundColor,\n        selectedDateTextColor: selectedDateTextColor,\n        selectedDateBackgroundColor: selectedDateBackgroundColor\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 25\n      }\n    });\n  })), React.createElement(View, {\n    style: styles.footer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: styles.btn_box,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 21\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.btn,\n    onPress: onCancelPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: styles.btn_text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 29\n    }\n  }, chinese ? '取消' : 'Cancel')), React.createElement(TouchableOpacity, {\n    style: styles.btn,\n    onPress: onConfirmPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: [styles.btn_text, {\n      color: confirmButtonColor\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 29\n    }\n  }, chinese ? '確定' : 'OK')))), React.createElement(ChangeYearModal, {\n    isVisible: showChangeYearModal,\n    dismiss: function dismiss() {\n      setShowChangeYearModal(false);\n    },\n    displayTime: displayTime,\n    setDisplayTime: setDisplayTime,\n    colorOptions: {\n      primary: changeYearModalColor,\n      backgroundColor: backgroundColor\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  })));\n};\n\nNeatDatePicker.proptype = {\n  isVisible: PropTypes.bool.isRequired,\n  mode: PropTypes.string.isRequired,\n  onConfirm: PropTypes.func,\n  minDate: PropTypes.object,\n  maxDate: PropTypes.object\n};\nNeatDatePicker.defaultProps = {};\nvar defaultColorOptions = {\n  backgroundColor: '#ffffff',\n  headerColor: '#4682E9',\n  headerTextColor: '#ffffff',\n  changeYearModalColor: '#4682E9',\n  weekDaysColor: '#4682E9',\n  dateTextColor: '#000000',\n  selectedDateTextColor: '#ffffff',\n  selectedDateBackgroundColor: '#4682E9',\n  confirmButtonColor: '#4682E9'\n};\nexport default NeatDatePicker;\nvar styles = StyleSheet.create({\n  modal: {\n    flex: 0,\n    height: winY,\n    alignItems: 'center',\n    padding: 0,\n    margin: 0\n  },\n  container: {\n    width: 328,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 12,\n    overflow: 'hidden'\n  },\n  header: {\n    flexDirection: 'row',\n    width: '100%',\n    height: 68,\n    paddingHorizontal: 24,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8\n  },\n  header__title: {\n    fontSize: 24,\n    color: '#fff',\n    fontFamily: 'Roboto_500Medium'\n  },\n  keys_container: {\n    width: 300,\n    height: 264,\n    justifyContent: 'center',\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  weekDays: {\n    fontSize: 16,\n    fontFamily: 'Roboto_400Regular'\n  },\n  keys: {\n    width: 34,\n    height: 30,\n    borderRadius: 10,\n    marginTop: 4,\n    marginHorizontal: 4,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  footer: {\n    width: '100%',\n    height: 52,\n    flexDirection: 'row',\n    justifyContent: 'flex-end'\n  },\n  btn_box: {\n    height: '100%',\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  btn: {\n    width: 80,\n    height: 44,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  btn_text: {\n    fontSize: 18,\n    fontFamily: 'Roboto_400Regular',\n    color: '#777'\n  },\n  changeMonthTO: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 50,\n    height: 50,\n    padding: 4,\n    borderColor: 'black'\n  }\n});","map":{"version":3,"sources":["/Users/seum/Desktop/peterpet/node_modules/react-native-neat-date-picker/src/components/NeatDatePicker.jsx"],"names":["React","useState","useEffect","Modal","PropTypes","useDaysOfMonth","MaterialIcons","MDicon","getMonthInChinese","getMonthInEnglish","ChangeYearModal","useFonts","Roboto_100Thin","Roboto_300Light","Roboto_400Regular","Roboto_500Medium","Roboto_700Bold","Key","winY","Dimensions","get","height","NeatDatePicker","isVisible","initialDate","mode","onCancel","onConfirm","minDate","maxDate","startDate","endDate","onBackButtonPress","onBackdropPress","chinese","colorOptions","showChangeYearModal","setShowChangeYearModal","sevenDays","Date","displayTime","setDisplayTime","year","getFullYear","month","getMonth","date","getDate","TODAY","output","setOutput","originalOutput","setOriginalOutput","minTime","getTime","maxTime","daysArray","onCancelPress","setTimeout","autoCompleteEndDate","onConfirmPress","btnDisabled","setBtnDisabled","onPrev","onNext","defaultColorOptions","backgroundColor","headerColor","headerTextColor","changeYearModalColor","weekDaysColor","dateTextColor","selectedDateTextColor","selectedDateBackgroundColor","confirmButtonColor","isFontsLoaded","styles","modal","container","header","changeMonthTO","header__title","color","keys_container","map","weekDay","index","keys","toString","weekDays","Day","i","footer","btn_box","btn","btn_text","primary","proptype","bool","isRequired","string","func","object","defaultProps","StyleSheet","create","flex","alignItems","padding","margin","width","justifyContent","borderRadius","overflow","flexDirection","paddingHorizontal","marginBottom","fontSize","fontFamily","flexWrap","marginTop","marginHorizontal","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, } from 'react'\r\nimport { StyleSheet, TouchableOpacity, View, Text, Dimensions } from 'react-native'\r\nimport Modal from 'react-native-modal'\r\nimport PropTypes from 'prop-types'\r\nimport useDaysOfMonth from '../hooks/useDaysOfMonth';\r\nimport { MaterialIcons as MDicon } from '@expo/vector-icons'\r\nimport { getMonthInChinese, getMonthInEnglish } from '../lib/lib';\r\nimport ChangeYearModal from './ChangeYearModal';\r\nimport {\r\n    useFonts,\r\n    Roboto_100Thin,\r\n    Roboto_300Light,\r\n    Roboto_400Regular,\r\n    Roboto_500Medium,\r\n    Roboto_700Bold,\r\n} from '@expo-google-fonts/roboto'\r\nimport Key from './Key'\r\n\r\nconst winY = Dimensions.get('window').height\r\n\r\nconst NeatDatePicker = ({\r\n    isVisible,\r\n    initialDate, mode,\r\n    onCancel, onConfirm,\r\n    minDate, maxDate,\r\n    startDate, endDate,\r\n    onBackButtonPress, onBackdropPress,\r\n    chinese, colorOptions,\r\n}) => {\r\n    const [showChangeYearModal, setShowChangeYearModal] = useState(false);\r\n    const sevenDays = chinese\r\n        ? ['日', '一', '二', '三', '四', '五', '六']\r\n        : ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n\r\n    // displayTime defines which month is going to be shown onto the screen\r\n    // For 'single' mode, displayTime is also the initial selected date when opening DatePicker at the first time.\r\n    const [displayTime, setDisplayTime] = useState(initialDate || new Date());\r\n    const year = displayTime.getFullYear()\r\n    const month = displayTime.getMonth()// 0-base\r\n    const date = displayTime.getDate()\r\n    const TODAY = new Date(year, month, date)\r\n\r\n    // output decides which date should be active.\r\n    const [output, setOutput] = useState(\r\n        mode === 'single'\r\n            ? { date: TODAY, startDate: null, endDate: null }\r\n            : { date: null, startDate: startDate || null, endDate: endDate || null }\r\n    );\r\n\r\n    // If user presses cancel, reset 'output' state to this 'originalOutput'\r\n    const [originalOutput, setOriginalOutput] = useState(output);\r\n\r\n    const minTime = minDate?.getTime()\r\n    const maxTime = maxDate?.getTime()\r\n\r\n    // useDaysOfMonth returns an array that having several objects, \r\n    //  representing all the days that are going to be rendered on screen.\r\n    // Each object contains five properties, 'year', 'month', 'date', 'isCurrentMonth' and 'disabled'.\r\n    const daysArray = useDaysOfMonth(year, month, minTime, maxTime)\r\n\r\n\r\n    const onCancelPress = () => {\r\n        onCancel()\r\n        setTimeout(() => {\r\n            // reset output to originalOutput\r\n            setOutput(originalOutput)\r\n\r\n            // originalOutput.startDate will be null only when the user hasn't picked any date using RANGE DatePicker.\r\n            // If that's the case, don't reset displayTime to originalOutput but initialDate/new Date()\r\n            if (mode === 'range' & !originalOutput.startDate) return setDisplayTime(initialDate || new Date())\r\n\r\n            // reset displayTime\r\n            return (mode === 'single')\r\n                ? setDisplayTime(originalOutput.date)\r\n                : setDisplayTime(originalOutput.startDate)\r\n        }, 300);\r\n    }\r\n\r\n    const autoCompleteEndDate = () => {\r\n        // set endDate to startDate\r\n        output.endDate = output.startDate\r\n\r\n        // After successfully passing arguments in onConfirm, in next life cycle set endDate to null.\r\n        // Therefore, next time when user opens DatePicker he can start from selecting endDate.\r\n        setOutput({ ...output, endDate: null })\r\n    }\r\n\r\n    const onConfirmPress = () => {\r\n        if (mode === 'single') onConfirm(output.date)\r\n        else {\r\n            // If have not selected any date, just to onCancel\r\n            if (mode === 'range' & !output.startDate) return onCancel()\r\n\r\n            //  If have not selected endDate, set it same as startDate\r\n            if (!output.endDate) autoCompleteEndDate()\r\n\r\n            onConfirm(output.startDate, output.endDate)\r\n        }\r\n\r\n        // Because the selected dates are confirmed, originalOutput should be updated.\r\n        setOriginalOutput({ ...output })\r\n\r\n        // reset displayTime\r\n        setTimeout(() => {\r\n            return (mode === 'single')\r\n                ? setDisplayTime(output.date)\r\n                : setDisplayTime(output.startDate)\r\n        }, 300);\r\n    }\r\n\r\n    const [btnDisabled, setBtnDisabled] = useState(false);\r\n\r\n    // move to previous month\r\n    const onPrev = () => {\r\n        setBtnDisabled(true)\r\n        setDisplayTime(new Date(year, month - 1, date))\r\n    }\r\n\r\n    // move to next month\r\n    const onNext = () => {\r\n        setBtnDisabled(true)\r\n        setDisplayTime(new Date(year, month + 1, date))\r\n    }\r\n\r\n    // Disable Prev & Next buttons for a while after pressing them.\r\n    // Otherwise if the user presses the button rapidly in a short time \r\n    // the switching delay of the calendar is not neglectable\r\n    useEffect(() => {\r\n        setTimeout(setBtnDisabled, 300, false)\r\n    }, [btnDisabled])\r\n\r\n    // destructure colorOptions\r\n    const {\r\n        backgroundColor,\r\n        headerColor,\r\n        headerTextColor,\r\n        changeYearModalColor,\r\n        weekDaysColor,\r\n        dateTextColor,\r\n        selectedDateTextColor,\r\n        selectedDateBackgroundColor,\r\n        confirmButtonColor,\r\n    } = { ...defaultColorOptions, ...colorOptions }\r\n\r\n    const [isFontsLoaded] = useFonts({\r\n        Roboto_100Thin,\r\n        Roboto_300Light,\r\n        Roboto_400Regular,\r\n        Roboto_500Medium,\r\n        Roboto_700Bold,\r\n    })\r\n    if (!isFontsLoaded) return null\r\n    return (\r\n        <Modal\r\n            isVisible={isVisible}\r\n            animationIn={'zoomIn'}\r\n            animationOut={'zoomOut'}\r\n            useNativeDriver\r\n            hideModalContentWhileAnimating\r\n            onBackButtonPress={onBackButtonPress || onCancelPress}\r\n            onBackdropPress={onBackdropPress || onCancelPress}\r\n            style={styles.modal}\r\n        >\r\n            <View style={[styles.container, { backgroundColor: backgroundColor, }]}>\r\n                <View style={[styles.header, { backgroundColor: headerColor }]}>\r\n\r\n                    {/* 上個月 */}\r\n                    <TouchableOpacity style={styles.changeMonthTO} onPress={onPrev} disabled={btnDisabled} >\r\n                        <MDicon name={'keyboard-arrow-left'} size={32} color={headerTextColor} />\r\n                    </TouchableOpacity>\r\n\r\n                    {/* 年月 */}\r\n                    <TouchableOpacity onPress={() => { setShowChangeYearModal(true) }}>\r\n                        <Text style={[styles.header__title, { color: headerTextColor }]}>\r\n                            {daysArray[10].year + ' '}\r\n                            {chinese ? getMonthInChinese(daysArray[10].month) : getMonthInEnglish(daysArray[10].month)}\r\n                        </Text>\r\n                    </TouchableOpacity>\r\n\r\n                    {/* 下個月 */}\r\n                    <TouchableOpacity style={styles.changeMonthTO} onPress={onNext} disabled={btnDisabled} >\r\n                        <MDicon name={'keyboard-arrow-right'} size={32} color={headerTextColor} />\r\n                    </TouchableOpacity>\r\n                </View>\r\n\r\n                <View style={styles.keys_container}>\r\n\r\n                    {/* week days  */}\r\n                    {sevenDays.map((weekDay, index) => (\r\n                        <View style={styles.keys} key={index.toString()}>\r\n                            <Text style={[styles.weekDays, { color: weekDaysColor }]}>\r\n                                {weekDay}\r\n                            </Text>\r\n                        </View>\r\n                    ))}\r\n\r\n                    {/* every days */}\r\n                    {daysArray.map((Day, i) => (\r\n                        <Key key={Day.year.toString() + Day.month.toString() + i.toString()}\r\n                            Day={Day}\r\n                            mode={mode}\r\n                            output={output}\r\n                            setOutput={setOutput}\r\n                            colorOptions={{\r\n                                dateTextColor,\r\n                                backgroundColor,\r\n                                selectedDateTextColor,\r\n                                selectedDateBackgroundColor\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </View>\r\n                <View style={styles.footer}>\r\n                    <View style={styles.btn_box}>\r\n                        <TouchableOpacity style={styles.btn} onPress={onCancelPress}>\r\n                            <Text style={styles.btn_text}>\r\n                                {chinese ? '取消' : 'Cancel'}\r\n                            </Text>\r\n                        </TouchableOpacity>\r\n                        <TouchableOpacity style={styles.btn} onPress={onConfirmPress}>\r\n                            <Text style={[styles.btn_text, { color: confirmButtonColor }]}>\r\n                                {chinese ? '確定' : 'OK'}\r\n                            </Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                </View>\r\n                <ChangeYearModal\r\n                    isVisible={showChangeYearModal}\r\n                    dismiss={() => { setShowChangeYearModal(false) }}\r\n                    displayTime={displayTime}\r\n                    setDisplayTime={setDisplayTime}\r\n                    colorOptions={{\r\n                        primary: changeYearModalColor,\r\n                        backgroundColor\r\n                    }}\r\n                />\r\n            </View>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nNeatDatePicker.proptype = {\r\n    isVisible: PropTypes.bool.isRequired,\r\n    mode: PropTypes.string.isRequired,\r\n    onConfirm: PropTypes.func,\r\n    minDate: PropTypes.object,\r\n    maxDate: PropTypes.object,\r\n\r\n}\r\n\r\nNeatDatePicker.defaultProps = {\r\n\r\n}\r\n\r\n// Notice: only six-digit HEX values are allowed.\r\nconst defaultColorOptions = {\r\n    backgroundColor: '#ffffff',\r\n    headerColor: '#4682E9',\r\n    headerTextColor: '#ffffff',\r\n    changeYearModalColor: '#4682E9',\r\n    weekDaysColor: '#4682E9',\r\n    dateTextColor: '#000000',\r\n    selectedDateTextColor: '#ffffff',\r\n    selectedDateBackgroundColor: '#4682E9',\r\n    confirmButtonColor: '#4682E9',\r\n}\r\n\r\nexport default NeatDatePicker\r\n\r\nconst styles = StyleSheet.create({\r\n    modal: {\r\n        flex: 0,\r\n        height: winY,\r\n        alignItems: 'center',\r\n        padding: 0,\r\n        margin: 0,\r\n    },\r\n    container: {\r\n        width: 328,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        borderRadius: 12,\r\n        overflow: 'hidden'\r\n    },\r\n    header: {\r\n        // borderWidth: 1,\r\n        flexDirection: 'row',\r\n        width: '100%',\r\n        height: 68,\r\n        paddingHorizontal: 24,\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: 8,\r\n    },\r\n    header__title: {\r\n        // borderWidth: 1,\r\n        fontSize: 24,\r\n        color: '#fff',\r\n        fontFamily: 'Roboto_500Medium'\r\n    },\r\n    keys_container: {\r\n        // borderWidth: 1,\r\n        width: 300,\r\n        height: 264,\r\n        justifyContent: 'center',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n    },\r\n    weekDays: {\r\n        fontSize: 16,\r\n        fontFamily: 'Roboto_400Regular'\r\n    },\r\n    keys: {\r\n        // borderWidth: 1,\r\n        width: 34,\r\n        height: 30,\r\n        borderRadius: 10,\r\n        marginTop: 4,\r\n        marginHorizontal: 4,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    footer: {\r\n        // borderWidth: 1,\r\n        width: '100%',\r\n        height: 52,\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-end',\r\n    },\r\n    btn_box: {\r\n        // borderWidth: 1,\r\n        height: '100%',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        padding: 8,\r\n    },\r\n    btn: {\r\n        // borderWidth: 1,\r\n        width: 80,\r\n        height: 44,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    btn_text: {\r\n        fontSize: 18,\r\n        fontFamily: 'Roboto_400Regular',\r\n        color: '#777',\r\n\r\n    },\r\n    changeMonthTO: {\r\n        // borderWidth: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: 50,\r\n        height: 50,\r\n        padding: 4,\r\n        borderColor: 'black',\r\n\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}