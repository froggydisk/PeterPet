{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\n\nvar useDaysOfMonth = function useDaysOfMonth(inputYear, inputMonth, minTime, maxTime) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      dateArray = _useState2[0],\n      setDateArray = _useState2[1];\n\n  var days = new Date(inputYear, inputMonth + 1, 0).getDate();\n  var firstDay = new Date(inputYear, inputMonth, 1).getDay();\n  var prevMonthDays = new Date(inputYear, inputMonth, 0).getDate();\n\n  var createDateArray = function createDateArray() {\n    var arr = Array.from(Array(days), function (_, i) {\n      return {\n        year: inputYear,\n        month: inputMonth,\n        date: i + 1,\n        isCurrentMonth: true,\n        disabled: false\n      };\n    });\n    var daysShouldInsert = firstDay;\n    var insertedNumber = prevMonthDays;\n\n    while (daysShouldInsert > 0 & daysShouldInsert < 7) {\n      var insertingTime = {\n        year: inputYear,\n        month: inputMonth - 1,\n        date: insertedNumber,\n        isCurrentMonth: false,\n        disabled: false\n      };\n      arr.unshift(insertingTime);\n      insertedNumber--;\n      daysShouldInsert--;\n    }\n\n    var blankInEnd = arr.length % 7;\n    if (blankInEnd !== 0) blankInEnd = blankInEnd - 7;\n    var i = -1;\n\n    while (i >= blankInEnd) {\n      var _insertingTime = {\n        year: inputYear,\n        month: inputMonth + 1,\n        date: i * -1,\n        isCurrentMonth: false,\n        disabled: false\n      };\n      arr.push(_objectSpread({}, _insertingTime));\n      i--;\n    }\n\n    if (minTime | maxTime) {\n      var checkShouldDisabled = function checkShouldDisabled(day) {\n        var thisKeyTime = new Date(day.year, day.month, day.date).getTime();\n        var shouldDisableKey = thisKeyTime > maxTime || thisKeyTime < minTime;\n        var disableKey = shouldDisableKey ? true : false;\n        return _objectSpread(_objectSpread({}, day), {}, {\n          disabled: disableKey\n        });\n      };\n\n      arr = arr.map(checkShouldDisabled);\n    }\n\n    return arr;\n  };\n\n  useEffect(function () {\n    setDateArray(createDateArray());\n  }, [inputYear, inputMonth, minTime, maxTime]);\n  return dateArray;\n};\n\nexport default useDaysOfMonth;","map":{"version":3,"sources":["/Users/seum/Desktop/peterpet/node_modules/react-native-neat-date-picker/src/hooks/useDaysOfMonth.jsx"],"names":["useState","useEffect","useDaysOfMonth","inputYear","inputMonth","minTime","maxTime","dateArray","setDateArray","days","Date","getDate","firstDay","getDay","prevMonthDays","createDateArray","arr","Array","from","_","i","year","month","date","isCurrentMonth","disabled","daysShouldInsert","insertedNumber","insertingTime","unshift","blankInEnd","length","push","checkShouldDisabled","day","thisKeyTime","getTime","shouldDisableKey","disableKey","map"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * input date\r\n * \r\n * inputYear: \r\n * inputMonth: 0-base\r\n * dateArray: An array that contains same amount of number as how many days in inputMonth, inputYear.\r\n *  Also contain last few days of the previous month and first few days of the next month.\r\n *  eg. 2021Feb starts from Monday and ends on Saturday,  dateArray = [1,2,3,4,...,27,28]\r\n * \r\n * \r\n */\r\n\r\n\r\nconst useDaysOfMonth = (inputYear, inputMonth, minTime, maxTime) => {\r\n\r\n    const [dateArray, setDateArray] = useState([]);\r\n\r\n    let days = new Date(inputYear, inputMonth + 1, 0).getDate()\r\n\r\n    let firstDay = new Date(inputYear, inputMonth, 1).getDay()\r\n\r\n    let prevMonthDays = new Date(inputYear, inputMonth, 0).getDate()\r\n\r\n    const createDateArray = () => {\r\n        let arr = Array.from(Array(days), ((_, i) => {\r\n            return {\r\n                year: inputYear,\r\n                month: inputMonth,\r\n                date: i + 1,\r\n                isCurrentMonth: true,\r\n                disabled: false,\r\n            }\r\n        }))\r\n\r\n\r\n        // 補上個月的日期\r\n        let daysShouldInsert = firstDay\r\n        let insertedNumber = prevMonthDays\r\n        while (daysShouldInsert > 0 & daysShouldInsert < 7) {\r\n\r\n            let insertingTime = {\r\n                year: inputYear,\r\n                month: inputMonth - 1,\r\n                date: insertedNumber,\r\n                isCurrentMonth: false,\r\n                disabled: false,\r\n            }\r\n            arr.unshift(insertingTime)\r\n            insertedNumber--\r\n            daysShouldInsert--\r\n        }\r\n\r\n        // 補下個月的日期\r\n        let blankInEnd = arr.length % 7 //最後一行剩幾個空格\r\n        if (blankInEnd !== 0) blankInEnd = blankInEnd - 7  //如有餘數則再減七,得到要補的日期數量\r\n        let i = -1\r\n        while (i >= blankInEnd) {\r\n            let insertingTime = {\r\n                year: inputYear,\r\n                month: inputMonth + 1,\r\n                date: (i * -1),\r\n                isCurrentMonth: false,\r\n                disabled: false,\r\n            }\r\n\r\n            arr.push({ ...insertingTime, })\r\n            i--\r\n        }\r\n\r\n        // 若有給上下限，把在範圍外的按鍵 disable\r\n        if (minTime | maxTime) {\r\n            const checkShouldDisabled = day => {\r\n                const thisKeyTime = new Date(day.year, day.month, day.date).getTime()\r\n                const shouldDisableKey = thisKeyTime > maxTime || thisKeyTime < minTime\r\n                const disableKey = shouldDisableKey ? true : false\r\n                return { ...day, disabled: disableKey }\r\n            }\r\n            arr = arr.map(checkShouldDisabled)\r\n        }\r\n\r\n        return arr\r\n    }\r\n\r\n    useEffect(() => {\r\n        setDateArray(createDateArray())\r\n    }, [inputYear, inputMonth, minTime, maxTime])\r\n\r\n    return dateArray\r\n}\r\n\r\nexport default useDaysOfMonth\r\n"]},"metadata":{},"sourceType":"module"}